"""Migrate is_active from Boolean to Enum

Revision ID: f4c711e6a5b8
Revises: 
Create Date: 2025-01-13 14:31:40.502354

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f4c711e6a5b8'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_salons_id', table_name='salons')
    op.alter_column('salons')
    op.drop_index('ix_users_id', table_name='users')
    op.drop_table('users')
    op.drop_index('ix_offering_services_id', table_name='offering_services')
    op.drop_table('offering_services')
    op.drop_table('business_days')
    op.drop_index('ix_appointments_id', table_name='appointments')
    op.drop_table('appointments')
    op.drop_index('ix_ratings_id', table_name='ratings')
    op.drop_table('ratings')
    op.drop_index('ix_commissions_id', table_name='commissions')
    op.drop_table('commissions')
    op.drop_table('business_hours')
    op.drop_table('holidays')
    op.drop_table('salon_employees')
    op.drop_index('ix_tenants_id', table_name='tenants')
    op.drop_table('tenants')
    op.drop_index('ix_categories_id', table_name='categories')
    op.drop_table('categories')
    op.drop_index('ix_portfolio_items_id', table_name='portfolio_items')
    op.drop_table('portfolio_items')
    op.drop_table('service_providers')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('service_providers',
    sa.Column('employee_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('service_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['employee_id'], ['users.id'], name='service_providers_employee_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['service_id'], ['offering_services.id'], name='service_providers_service_id_fkey', ondelete='CASCADE')
    )
    op.create_table('portfolio_items',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('employee_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('salon_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('image_url', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('offering_service_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['employee_id'], ['users.id'], name='portfolio_items_employee_id_fkey'),
    sa.ForeignKeyConstraint(['offering_service_id'], ['offering_services.id'], name='portfolio_items_offering_service_id_fkey'),
    sa.ForeignKeyConstraint(['salon_id'], ['salons.id'], name='portfolio_items_salon_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='portfolio_items_pkey')
    )
    op.create_index('ix_portfolio_items_id', 'portfolio_items', ['id'], unique=False)
    op.create_table('categories',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='categories_pkey'),
    sa.UniqueConstraint('name', name='categories_name_key')
    )
    op.create_index('ix_categories_id', 'categories', ['id'], unique=False)
    op.create_table('tenants',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('business_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('document_type', postgresql.ENUM('CPF', 'CNPJ', name='documenttype'), autoincrement=False, nullable=False),
    sa.Column('document', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', postgresql.ENUM('ACTIVE', 'INACTIVE', name='statusrole'), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='tenants_pkey'),
    sa.UniqueConstraint('document', name='tenants_document_key'),
    sa.UniqueConstraint('email', name='tenants_email_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_tenants_id', 'tenants', ['id'], unique=False)
    op.create_table('salon_employees',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('salon_tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('salon_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['salon_tenant_id', 'salon_id'], ['salons.tenant_id', 'salons.id'], name='salon_employees_salon_tenant_id_salon_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='salon_employees_user_id_fkey', ondelete='CASCADE')
    )
    op.create_table('holidays',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('salon_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_closed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('open_time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('close_time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['salon_id'], ['salons.id'], name='holidays_salon_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='holidays_pkey')
    )
    op.create_table('business_hours',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('business_day_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('salon_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('open_time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('close_time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['business_day_id'], ['business_days.id'], name='business_hours_business_day_id_fkey'),
    sa.ForeignKeyConstraint(['salon_id'], ['salons.id'], name='business_hours_salon_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='business_hours_pkey')
    )
    op.create_table('commissions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('employee_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('salon_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('commission_type', postgresql.ENUM('FIXED', 'PERCENTAGE', name='commissiontype'), autoincrement=False, nullable=False),
    sa.Column('value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['employee_id'], ['users.id'], name='commissions_employee_id_fkey'),
    sa.ForeignKeyConstraint(['salon_id'], ['salons.id'], name='commissions_salon_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='commissions_pkey')
    )
    op.create_index('ix_commissions_id', 'commissions', ['id'], unique=False)
    op.create_table('ratings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('service_provider_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('salon_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint('rating >= 1 AND rating <= 5', name='valid_rating_range'),
    sa.ForeignKeyConstraint(['salon_id'], ['salons.id'], name='ratings_salon_id_fkey'),
    sa.ForeignKeyConstraint(['service_provider_id'], ['users.id'], name='ratings_service_provider_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='ratings_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='ratings_pkey')
    )
    op.create_index('ix_ratings_id', 'ratings', ['id'], unique=False)
    op.create_table('appointments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('provider_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('offering_service_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('salon_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('scheduled_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'CONFIRMED', 'COMPLETED', 'CANCELLED', 'NO_SHOW', name='appointmentstatus'), autoincrement=False, nullable=False),
    sa.Column('notes', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['users.id'], name='appointments_client_id_fkey'),
    sa.ForeignKeyConstraint(['offering_service_id'], ['offering_services.id'], name='appointments_offering_service_id_fkey'),
    sa.ForeignKeyConstraint(['provider_id'], ['users.id'], name='appointments_provider_id_fkey'),
    sa.ForeignKeyConstraint(['salon_id'], ['salons.id'], name='appointments_salon_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='appointments_pkey')
    )
    op.create_index('ix_appointments_id', 'appointments', ['id'], unique=False)
    op.create_table('business_days',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('salon_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('day_of_week', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_open', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['salon_id'], ['salons.id'], name='business_days_salon_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='business_days_pkey')
    )
    op.create_table('offering_services',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('salon_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('employee_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['employee_id'], ['users.id'], name='offering_services_employee_id_fkey'),
    sa.ForeignKeyConstraint(['salon_id'], ['salons.id'], name='offering_services_salon_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='offering_services_pkey')
    )
    op.create_index('ix_offering_services_id', 'offering_services', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('CLIENT', 'SALON_OWNER', 'ADMIN', name='userrole'), autoincrement=False, nullable=True),
    sa.Column('is_active', postgresql.ENUM('ACTIVE', 'INACTIVE', name='statusrole'), autoincrement=False, nullable=True),
    sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('profile_image', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('commission_rate', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='users_tenant_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    sa.UniqueConstraint('phone', name='users_phone_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_table('salons',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('address', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('city', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('state', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('cnpj', sa.VARCHAR(length=14), autoincrement=False, nullable=False),
    sa.Column('zip_code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_ratings', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('image_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('parent_tenant_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_headquarters', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='salons_owner_id_fkey'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='salons_tenant_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='salons_pkey'),
    sa.UniqueConstraint('tenant_id', 'id', name='uix_tenant_salon')
    )
    op.create_index('ix_salons_id', 'salons', ['id'], unique=False)
    # ### end Alembic commands ###
